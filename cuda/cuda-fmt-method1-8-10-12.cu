// automatically generated by gen_fmt_method1 function
// m = 0, nexp = 10, eps = 1.0e-12
__device__ void gpu_fmt0_method1( const double t, const double coef, double fmt[] ) {
    if ( t >= 26 ) {
        fmt[0] = coef * LDG(FMT_m_sqrt_pi_2) * sqrt(1.e0/t);
    } else {
      int it;
      double t0, dt, *f;
      double delta = LDG(FMT_m_delta[0]);
      double dhalf = delta * 0.5;
        it = (int)(t*2);
        t0 = delta * (double)it + dhalf;
        dt = t0 - t;
        f  = &FMT_m_table0[it*(0+10)];
        fmt[0] = LDM(f[0]) + dt *( LDM(f[1]) + dt *( LDM(f[2]) + dt *( LDM(f[3]) + dt *
                ( LDM(f[4]) + dt *( LDM(f[5]) + dt *( LDM(f[6]) + dt *( LDM(f[7]) + dt *
                ( LDM(f[8]) + dt * LDM(f[9])))))))));
        fmt[0] *= coef;
    }
}

// automatically generated by gen_fmt_method1 function
// m = 1, nexp = 10, eps = 1.0e-12
__device__ void gpu_fmt1_method1( const double t, const double coef, double fmt[] ) {
    if ( t >= 30 ) {
      double t2, sqrt2;
        sqrt2  = sqrt( 0.5e0 / t );
        t2     = sqrt2*sqrt2;
        fmt[0] = coef * LDG(FMT_m_sqrt_pi2) * sqrt2;
        fmt[1] =        t2 * fmt[0];
    } else {
      int it;
      double t0, dt, *f;
      double dtk[10];
      double delta = LDG(FMT_m_delta[1]);
      double dhalf = delta * 0.5;
        it = (int)(t*2);
        t0 = delta * (double)it + dhalf;
        dt = t0 - t;
        f  = &FMT_m_table1[it*(1+10)];
        dtk[1] = dt;
        for (int k=2; k<10; k++ ) dtk[k] = dtk[k-1]*(LDG(FMT_m_dinv[k])*dt);
        fmt[0] = LDM(f[0]) + dtk[1]*LDM(f[1]) + dtk[2]*LDM(f[2]) + dtk[3]*LDM(f[3])
                 + dtk[4]*LDM(f[4]) + dtk[5]*LDM(f[5]) + dtk[6]*LDM(f[6]) + dtk[7]*LDM(f[7])
                 + dtk[8]*LDM(f[8]) + dtk[9]*LDM(f[9]);
        fmt[0] *= coef;
        fmt[1] = LDM(f[1]) + dtk[1]*LDM(f[2]) + dtk[2]*LDM(f[3]) + dtk[3]*LDM(f[4])
                 + dtk[4]*LDM(f[5]) + dtk[5]*LDM(f[6]) + dtk[6]*LDM(f[7]) + dtk[7]*LDM(f[8])
                 + dtk[8]*LDM(f[9]) + dtk[9]*LDM(f[10]);
        fmt[1] *= coef;
    }
}

// automatically generated by gen_fmt_method1 function
// m = 2, nexp = 10, eps = 1.0e-12
__device__ void gpu_fmt2_method1( const double t, const double coef, double fmt[] ) {
    if ( t >= 33 ) {
      double t2, sqrt2;
        sqrt2  = sqrt( 0.5e0 / t );
        t2     = sqrt2*sqrt2;
        fmt[0] = coef * LDG(FMT_m_sqrt_pi2) * sqrt2;
        fmt[1] =        t2 * fmt[0];
        fmt[2] = 3.e0 * t2 * fmt[1];
    } else {
      int it;
      double t0, dt, *f;
      double dtk[10];
      double delta = LDG(FMT_m_delta[2]);
      double dhalf = delta * 0.5;
        it = (int)(t*2);
        t0 = delta * (double)it + dhalf;
        dt = t0 - t;
        f  = &FMT_m_table2[it*(2+10)];
        dtk[1] = dt;
        for (int k=2; k<10; k++ ) dtk[k] = dtk[k-1]*(LDG(FMT_m_dinv[k])*dt);
        fmt[0] = LDM(f[0]) + dtk[1]*LDM(f[1]) + dtk[2]*LDM(f[2]) + dtk[3]*LDM(f[3])
                 + dtk[4]*LDM(f[4]) + dtk[5]*LDM(f[5]) + dtk[6]*LDM(f[6]) + dtk[7]*LDM(f[7])
                 + dtk[8]*LDM(f[8]) + dtk[9]*LDM(f[9]);
        fmt[0] *= coef;
        fmt[1] = LDM(f[1]) + dtk[1]*LDM(f[2]) + dtk[2]*LDM(f[3]) + dtk[3]*LDM(f[4])
                 + dtk[4]*LDM(f[5]) + dtk[5]*LDM(f[6]) + dtk[6]*LDM(f[7]) + dtk[7]*LDM(f[8])
                 + dtk[8]*LDM(f[9]) + dtk[9]*LDM(f[10]);
        fmt[1] *= coef;
        fmt[2] = LDM(f[2]) + dtk[1]*LDM(f[3]) + dtk[2]*LDM(f[4]) + dtk[3]*LDM(f[5])
                 + dtk[4]*LDM(f[6]) + dtk[5]*LDM(f[7]) + dtk[6]*LDM(f[8]) + dtk[7]*LDM(f[9])
                 + dtk[8]*LDM(f[10]) + dtk[9]*LDM(f[11]);
        fmt[2] *= coef;
    }
}

// automatically generated by gen_fmt_method1 function
// m = 3, nexp = 10, eps = 1.0e-12
__device__ void gpu_fmt3_method1( const double t, const double coef, double fmt[] ) {
    if ( t >= 36 ) {
      double t2, sqrt2;
        sqrt2  = sqrt( 0.5e0 / t );
        t2     = sqrt2*sqrt2;
        fmt[0] = coef * LDG(FMT_m_sqrt_pi2) * sqrt2;
        fmt[1] =        t2 * fmt[0];
        fmt[2] = 3.e0 * t2 * fmt[1];
        fmt[3] = 5.e0 * t2 * fmt[2];
    } else {
      int it;
      double t0, dt, *f;
      double dtk[10];
      double delta = LDG(FMT_m_delta[3]);
      double dhalf = delta * 0.5;
        it = (int)(t*2);
        t0 = delta * (double)it + dhalf;
        dt = t0 - t;
        f  = &FMT_m_table3[it*(3+10)];
        dtk[1] = dt;
        for (int k=2; k<10; k++ ) dtk[k] = dtk[k-1]*(LDG(FMT_m_dinv[k])*dt);
        fmt[0] = LDM(f[0]) + dtk[1]*LDM(f[1]) + dtk[2]*LDM(f[2]) + dtk[3]*LDM(f[3])
                 + dtk[4]*LDM(f[4]) + dtk[5]*LDM(f[5]) + dtk[6]*LDM(f[6]) + dtk[7]*LDM(f[7])
                 + dtk[8]*LDM(f[8]) + dtk[9]*LDM(f[9]);
        fmt[0] *= coef;
        fmt[1] = LDM(f[1]) + dtk[1]*LDM(f[2]) + dtk[2]*LDM(f[3]) + dtk[3]*LDM(f[4])
                 + dtk[4]*LDM(f[5]) + dtk[5]*LDM(f[6]) + dtk[6]*LDM(f[7]) + dtk[7]*LDM(f[8])
                 + dtk[8]*LDM(f[9]) + dtk[9]*LDM(f[10]);
        fmt[1] *= coef;
        fmt[2] = LDM(f[2]) + dtk[1]*LDM(f[3]) + dtk[2]*LDM(f[4]) + dtk[3]*LDM(f[5])
                 + dtk[4]*LDM(f[6]) + dtk[5]*LDM(f[7]) + dtk[6]*LDM(f[8]) + dtk[7]*LDM(f[9])
                 + dtk[8]*LDM(f[10]) + dtk[9]*LDM(f[11]);
        fmt[2] *= coef;
        fmt[3] = LDM(f[3]) + dtk[1]*LDM(f[4]) + dtk[2]*LDM(f[5]) + dtk[3]*LDM(f[6])
                 + dtk[4]*LDM(f[7]) + dtk[5]*LDM(f[8]) + dtk[6]*LDM(f[9]) + dtk[7]*LDM(f[10])
                 + dtk[8]*LDM(f[11]) + dtk[9]*LDM(f[12]);
        fmt[3] *= coef;
    }
}

// automatically generated by gen_fmt_method1 function
// m = 4, nexp = 10, eps = 1.0e-12
__device__ void gpu_fmt4_method1( const double t, const double coef, double fmt[] ) {
    if ( t >= 39 ) {
      double t2, sqrt2;
        sqrt2  = sqrt( 0.5e0 / t );
        t2     = sqrt2*sqrt2;
        fmt[0] = coef * LDG(FMT_m_sqrt_pi2) * sqrt2;
        fmt[1] =        t2 * fmt[0];
        fmt[2] = 3.e0 * t2 * fmt[1];
        fmt[3] = 5.e0 * t2 * fmt[2];
        fmt[4] = 7.e0 * t2 * fmt[3];
    } else {
      int it;
      double t0, dt, *f;
      double dtk[10];
      double delta = LDG(FMT_m_delta[4]);
      double dhalf = delta * 0.5;
        it = (int)(t*2);
        t0 = delta * (double)it + dhalf;
        dt = t0 - t;
        f  = &FMT_m_table4[it*(4+10)];
        dtk[1] = dt;
        for (int k=2; k<10; k++ ) dtk[k] = dtk[k-1]*(LDG(FMT_m_dinv[k])*dt);
        fmt[0] = LDM(f[0]) + dtk[1]*LDM(f[1]) + dtk[2]*LDM(f[2]) + dtk[3]*LDM(f[3])
                 + dtk[4]*LDM(f[4]) + dtk[5]*LDM(f[5]) + dtk[6]*LDM(f[6]) + dtk[7]*LDM(f[7])
                 + dtk[8]*LDM(f[8]) + dtk[9]*LDM(f[9]);
        fmt[0] *= coef;
        fmt[1] = LDM(f[1]) + dtk[1]*LDM(f[2]) + dtk[2]*LDM(f[3]) + dtk[3]*LDM(f[4])
                 + dtk[4]*LDM(f[5]) + dtk[5]*LDM(f[6]) + dtk[6]*LDM(f[7]) + dtk[7]*LDM(f[8])
                 + dtk[8]*LDM(f[9]) + dtk[9]*LDM(f[10]);
        fmt[1] *= coef;
        fmt[2] = LDM(f[2]) + dtk[1]*LDM(f[3]) + dtk[2]*LDM(f[4]) + dtk[3]*LDM(f[5])
                 + dtk[4]*LDM(f[6]) + dtk[5]*LDM(f[7]) + dtk[6]*LDM(f[8]) + dtk[7]*LDM(f[9])
                 + dtk[8]*LDM(f[10]) + dtk[9]*LDM(f[11]);
        fmt[2] *= coef;
        fmt[3] = LDM(f[3]) + dtk[1]*LDM(f[4]) + dtk[2]*LDM(f[5]) + dtk[3]*LDM(f[6])
                 + dtk[4]*LDM(f[7]) + dtk[5]*LDM(f[8]) + dtk[6]*LDM(f[9]) + dtk[7]*LDM(f[10])
                 + dtk[8]*LDM(f[11]) + dtk[9]*LDM(f[12]);
        fmt[3] *= coef;
        fmt[4] = LDM(f[4]) + dtk[1]*LDM(f[5]) + dtk[2]*LDM(f[6]) + dtk[3]*LDM(f[7])
                 + dtk[4]*LDM(f[8]) + dtk[5]*LDM(f[9]) + dtk[6]*LDM(f[10]) + dtk[7]*LDM(f[11])
                 + dtk[8]*LDM(f[12]) + dtk[9]*LDM(f[13]);
        fmt[4] *= coef;
    }
}

// automatically generated by gen_fmt_method1 function
// m = 5, nexp = 10, eps = 1.0e-12
__device__ void gpu_fmt5_method1( const double t, const double coef, double fmt[] ) {
    if ( t >= 41 ) {
      double t2, sqrt2;
        sqrt2  = sqrt( 0.5e0 / t );
        t2     = sqrt2*sqrt2;
        fmt[0] = coef * LDG(FMT_m_sqrt_pi2) * sqrt2;
        fmt[1] =         t2 * fmt[0];
        fmt[2] = 3.e0 * t2 * fmt[1];
        fmt[3] = 5.e0 * t2 * fmt[2];
        fmt[4] = 7.e0 * t2 * fmt[3];
        fmt[5] = 9.e0 * t2 * fmt[4];
    } else {
      int it;
      double t0, dt, *f;
      double dtk[10];
      double delta = LDG(FMT_m_delta[5]);
      double dhalf = delta * 0.5;
        it = (int)(t*2);
        t0 = delta * (double)it + dhalf;
        dt = t0 - t;
        f  = &FMT_m_table5[it*(5+10)];
        dtk[1] = dt;
        for (int k=2; k<10; k++ ) dtk[k] = dtk[k-1]*(LDG(FMT_m_dinv[k])*dt);
        fmt[0] = LDM(f[0]) + dtk[1]*LDM(f[1]) + dtk[2]*LDM(f[2]) + dtk[3]*LDM(f[3])
                 + dtk[4]*LDM(f[4]) + dtk[5]*LDM(f[5]) + dtk[6]*LDM(f[6]) + dtk[7]*LDM(f[7])
                 + dtk[8]*LDM(f[8]) + dtk[9]*LDM(f[9]);
        fmt[0] *= coef;
        fmt[1] = LDM(f[1]) + dtk[1]*LDM(f[2]) + dtk[2]*LDM(f[3]) + dtk[3]*LDM(f[4])
                 + dtk[4]*LDM(f[5]) + dtk[5]*LDM(f[6]) + dtk[6]*LDM(f[7]) + dtk[7]*LDM(f[8])
                 + dtk[8]*LDM(f[9]) + dtk[9]*LDM(f[10]);
        fmt[1] *= coef;
        fmt[2] = LDM(f[2]) + dtk[1]*LDM(f[3]) + dtk[2]*LDM(f[4]) + dtk[3]*LDM(f[5])
                 + dtk[4]*LDM(f[6]) + dtk[5]*LDM(f[7]) + dtk[6]*LDM(f[8]) + dtk[7]*LDM(f[9])
                 + dtk[8]*LDM(f[10]) + dtk[9]*LDM(f[11]);
        fmt[2] *= coef;
        fmt[3] = LDM(f[3]) + dtk[1]*LDM(f[4]) + dtk[2]*LDM(f[5]) + dtk[3]*LDM(f[6])
                 + dtk[4]*LDM(f[7]) + dtk[5]*LDM(f[8]) + dtk[6]*LDM(f[9]) + dtk[7]*LDM(f[10])
                 + dtk[8]*LDM(f[11]) + dtk[9]*LDM(f[12]);
        fmt[3] *= coef;
        fmt[4] = LDM(f[4]) + dtk[1]*LDM(f[5]) + dtk[2]*LDM(f[6]) + dtk[3]*LDM(f[7])
                 + dtk[4]*LDM(f[8]) + dtk[5]*LDM(f[9]) + dtk[6]*LDM(f[10]) + dtk[7]*LDM(f[11])
                 + dtk[8]*LDM(f[12]) + dtk[9]*LDM(f[13]);
        fmt[4] *= coef;
        fmt[5] = LDM(f[5]) + dtk[1]*LDM(f[6]) + dtk[2]*LDM(f[7]) + dtk[3]*LDM(f[8])
                 + dtk[4]*LDM(f[9]) + dtk[5]*LDM(f[10]) + dtk[6]*LDM(f[11])
                 + dtk[7]*LDM(f[12]) + dtk[8]*LDM(f[13]) + dtk[9]*LDM(f[14]);
        fmt[5] *= coef;
    }
}

// automatically generated by gen_fmt_method1 function
// m = 6, nexp = 10, eps = 1.0e-12
__device__ void gpu_fmt6_method1( const double t, const double coef, double fmt[] ) {
    if ( t >= 43 ) {
      double t2, sqrt2;
        sqrt2  = sqrt( 0.5e0 / t );
        t2     = sqrt2*sqrt2;
        fmt[0] = coef * LDG(FMT_m_sqrt_pi2) * sqrt2;
        fmt[1] =         t2 * fmt[0];
        fmt[2] = 3.e0 * t2 * fmt[1];
        fmt[3] = 5.e0 * t2 * fmt[2];
        fmt[4] = 7.e0 * t2 * fmt[3];
        fmt[5] = 9.e0 * t2 * fmt[4];
        fmt[6] = 11.e0 * t2 * fmt[5];
    } else {
      int it;
      double t0, dt, *f;
      double dtk[10];
      double delta = LDG(FMT_m_delta[6]);
      double dhalf = delta * 0.5;
        it = (int)(t*2);
        t0 = delta * (double)it + dhalf;
        dt = t0 - t;
        f  = &FMT_m_table6[it*(6+10)];
        dtk[1] = dt;
        for (int k=2; k<10; k++ ) dtk[k] = dtk[k-1]*(LDG(FMT_m_dinv[k])*dt);
        fmt[0] = LDM(f[0]) + dtk[1]*LDM(f[1]) + dtk[2]*LDM(f[2]) + dtk[3]*LDM(f[3])
                 + dtk[4]*LDM(f[4]) + dtk[5]*LDM(f[5]) + dtk[6]*LDM(f[6]) + dtk[7]*LDM(f[7])
                 + dtk[8]*LDM(f[8]) + dtk[9]*LDM(f[9]);
        fmt[0] *= coef;
        fmt[1] = LDM(f[1]) + dtk[1]*LDM(f[2]) + dtk[2]*LDM(f[3]) + dtk[3]*LDM(f[4])
                 + dtk[4]*LDM(f[5]) + dtk[5]*LDM(f[6]) + dtk[6]*LDM(f[7]) + dtk[7]*LDM(f[8])
                 + dtk[8]*LDM(f[9]) + dtk[9]*LDM(f[10]);
        fmt[1] *= coef;
        fmt[2] = LDM(f[2]) + dtk[1]*LDM(f[3]) + dtk[2]*LDM(f[4]) + dtk[3]*LDM(f[5])
                 + dtk[4]*LDM(f[6]) + dtk[5]*LDM(f[7]) + dtk[6]*LDM(f[8]) + dtk[7]*LDM(f[9])
                 + dtk[8]*LDM(f[10]) + dtk[9]*LDM(f[11]);
        fmt[2] *= coef;
        fmt[3] = LDM(f[3]) + dtk[1]*LDM(f[4]) + dtk[2]*LDM(f[5]) + dtk[3]*LDM(f[6])
                 + dtk[4]*LDM(f[7]) + dtk[5]*LDM(f[8]) + dtk[6]*LDM(f[9]) + dtk[7]*LDM(f[10])
                 + dtk[8]*LDM(f[11]) + dtk[9]*LDM(f[12]);
        fmt[3] *= coef;
        fmt[4] = LDM(f[4]) + dtk[1]*LDM(f[5]) + dtk[2]*LDM(f[6]) + dtk[3]*LDM(f[7])
                 + dtk[4]*LDM(f[8]) + dtk[5]*LDM(f[9]) + dtk[6]*LDM(f[10]) + dtk[7]*LDM(f[11])
                 + dtk[8]*LDM(f[12]) + dtk[9]*LDM(f[13]);
        fmt[4] *= coef;
        fmt[5] = LDM(f[5]) + dtk[1]*LDM(f[6]) + dtk[2]*LDM(f[7]) + dtk[3]*LDM(f[8])
                 + dtk[4]*LDM(f[9]) + dtk[5]*LDM(f[10]) + dtk[6]*LDM(f[11])
                 + dtk[7]*LDM(f[12]) + dtk[8]*LDM(f[13]) + dtk[9]*LDM(f[14]);
        fmt[5] *= coef;
        fmt[6] = LDM(f[6]) + dtk[1]*LDM(f[7]) + dtk[2]*LDM(f[8]) + dtk[3]*LDM(f[9])
                 + dtk[4]*LDM(f[10]) + dtk[5]*LDM(f[11]) + dtk[6]*LDM(f[12])
                 + dtk[7]*LDM(f[13]) + dtk[8]*LDM(f[14]) + dtk[9]*LDM(f[15]);
        fmt[6] *= coef;
    }
}

// automatically generated by gen_fmt_method1 function
// m = 7, nexp = 10, eps = 1.0e-12
__device__ void gpu_fmt7_method1( const double t, const double coef, double fmt[] ) {
    if ( t >= 45 ) {
      double t2, sqrt2;
        sqrt2  = sqrt( 0.5e0 / t );
        t2     = sqrt2*sqrt2;
        fmt[0] = coef * LDG(FMT_m_sqrt_pi2) * sqrt2;
        fmt[1] =         t2 * fmt[0];
        fmt[2] = 3.e0 * t2 * fmt[1];
        fmt[3] = 5.e0 * t2 * fmt[2];
        fmt[4] = 7.e0 * t2 * fmt[3];
        fmt[5] = 9.e0 * t2 * fmt[4];
        fmt[6] = 11.e0 * t2 * fmt[5];
        fmt[7] = 13.e0 * t2 * fmt[6];
    } else {
      int it;
      double t0, dt, *f;
      double dtk[10];
      double delta = LDG(FMT_m_delta[7]);
      double dhalf = delta * 0.5;
        it = (int)(t*2);
        t0 = delta * (double)it + dhalf;
        dt = t0 - t;
        f  = &FMT_m_table7[it*(7+10)];
        dtk[1] = dt;
        for (int k=2; k<10; k++ ) dtk[k] = dtk[k-1]*(LDG(FMT_m_dinv[k])*dt);
        fmt[0] = LDM(f[0]) + dtk[1]*LDM(f[1]) + dtk[2]*LDM(f[2]) + dtk[3]*LDM(f[3])
                 + dtk[4]*LDM(f[4]) + dtk[5]*LDM(f[5]) + dtk[6]*LDM(f[6]) + dtk[7]*LDM(f[7])
                 + dtk[8]*LDM(f[8]) + dtk[9]*LDM(f[9]);
        fmt[0] *= coef;
        fmt[1] = LDM(f[1]) + dtk[1]*LDM(f[2]) + dtk[2]*LDM(f[3]) + dtk[3]*LDM(f[4])
                 + dtk[4]*LDM(f[5]) + dtk[5]*LDM(f[6]) + dtk[6]*LDM(f[7]) + dtk[7]*LDM(f[8])
                 + dtk[8]*LDM(f[9]) + dtk[9]*LDM(f[10]);
        fmt[1] *= coef;
        fmt[2] = LDM(f[2]) + dtk[1]*LDM(f[3]) + dtk[2]*LDM(f[4]) + dtk[3]*LDM(f[5])
                 + dtk[4]*LDM(f[6]) + dtk[5]*LDM(f[7]) + dtk[6]*LDM(f[8]) + dtk[7]*LDM(f[9])
                 + dtk[8]*LDM(f[10]) + dtk[9]*LDM(f[11]);
        fmt[2] *= coef;
        fmt[3] = LDM(f[3]) + dtk[1]*LDM(f[4]) + dtk[2]*LDM(f[5]) + dtk[3]*LDM(f[6])
                 + dtk[4]*LDM(f[7]) + dtk[5]*LDM(f[8]) + dtk[6]*LDM(f[9]) + dtk[7]*LDM(f[10])
                 + dtk[8]*LDM(f[11]) + dtk[9]*LDM(f[12]);
        fmt[3] *= coef;
        fmt[4] = LDM(f[4]) + dtk[1]*LDM(f[5]) + dtk[2]*LDM(f[6]) + dtk[3]*LDM(f[7])
                 + dtk[4]*LDM(f[8]) + dtk[5]*LDM(f[9]) + dtk[6]*LDM(f[10]) + dtk[7]*LDM(f[11])
                 + dtk[8]*LDM(f[12]) + dtk[9]*LDM(f[13]);
        fmt[4] *= coef;
        fmt[5] = LDM(f[5]) + dtk[1]*LDM(f[6]) + dtk[2]*LDM(f[7]) + dtk[3]*LDM(f[8])
                 + dtk[4]*LDM(f[9]) + dtk[5]*LDM(f[10]) + dtk[6]*LDM(f[11])
                 + dtk[7]*LDM(f[12]) + dtk[8]*LDM(f[13]) + dtk[9]*LDM(f[14]);
        fmt[5] *= coef;
        fmt[6] = LDM(f[6]) + dtk[1]*LDM(f[7]) + dtk[2]*LDM(f[8]) + dtk[3]*LDM(f[9])
                 + dtk[4]*LDM(f[10]) + dtk[5]*LDM(f[11]) + dtk[6]*LDM(f[12])
                 + dtk[7]*LDM(f[13]) + dtk[8]*LDM(f[14]) + dtk[9]*LDM(f[15]);
        fmt[6] *= coef;
        fmt[7] = LDM(f[7]) + dtk[1]*LDM(f[8]) + dtk[2]*LDM(f[9]) + dtk[3]*LDM(f[10])
                 + dtk[4]*LDM(f[11]) + dtk[5]*LDM(f[12]) + dtk[6]*LDM(f[13])
                 + dtk[7]*LDM(f[14]) + dtk[8]*LDM(f[15]) + dtk[9]*LDM(f[16]);
        fmt[7] *= coef;
    }
}

// automatically generated by gen_fmt_method1 function
// m = 8, nexp = 10, eps = 1.0e-12
__device__ void gpu_fmt8_method1( const double t, const double coef, double fmt[] ) {
    if ( t >= 48 ) {
      double t2, sqrt2;
        sqrt2  = sqrt( 0.5e0 / t );
        t2     = sqrt2*sqrt2;
        fmt[0] = coef * LDG(FMT_m_sqrt_pi2) * sqrt2;
        fmt[1] =         t2 * fmt[0];
        fmt[2] = 3.e0 * t2 * fmt[1];
        fmt[3] = 5.e0 * t2 * fmt[2];
        fmt[4] = 7.e0 * t2 * fmt[3];
        fmt[5] = 9.e0 * t2 * fmt[4];
        fmt[6] = 11.e0 * t2 * fmt[5];
        fmt[7] = 13.e0 * t2 * fmt[6];
        fmt[8] = 15.e0 * t2 * fmt[7];
    } else {
      int it;
      double t0, dt, *f;
      double dtk[10];
      double delta = LDG(FMT_m_delta[8]);
      double dhalf = delta * 0.5;
        it = (int)(t*2);
        t0 = delta * (double)it + dhalf;
        dt = t0 - t;
        f  = &FMT_m_table8[it*(8+10)];
        dtk[1] = dt;
        for (int k=2; k<10; k++ ) dtk[k] = dtk[k-1]*(LDG(FMT_m_dinv[k])*dt);
        fmt[0] = LDM(f[0]) + dtk[1]*LDM(f[1]) + dtk[2]*LDM(f[2]) + dtk[3]*LDM(f[3])
                 + dtk[4]*LDM(f[4]) + dtk[5]*LDM(f[5]) + dtk[6]*LDM(f[6]) + dtk[7]*LDM(f[7])
                 + dtk[8]*LDM(f[8]) + dtk[9]*LDM(f[9]);
        fmt[0] *= coef;
        fmt[1] = LDM(f[1]) + dtk[1]*LDM(f[2]) + dtk[2]*LDM(f[3]) + dtk[3]*LDM(f[4])
                 + dtk[4]*LDM(f[5]) + dtk[5]*LDM(f[6]) + dtk[6]*LDM(f[7]) + dtk[7]*LDM(f[8])
                 + dtk[8]*LDM(f[9]) + dtk[9]*LDM(f[10]);
        fmt[1] *= coef;
        fmt[2] = LDM(f[2]) + dtk[1]*LDM(f[3]) + dtk[2]*LDM(f[4]) + dtk[3]*LDM(f[5])
                 + dtk[4]*LDM(f[6]) + dtk[5]*LDM(f[7]) + dtk[6]*LDM(f[8]) + dtk[7]*LDM(f[9])
                 + dtk[8]*LDM(f[10]) + dtk[9]*LDM(f[11]);
        fmt[2] *= coef;
        fmt[3] = LDM(f[3]) + dtk[1]*LDM(f[4]) + dtk[2]*LDM(f[5]) + dtk[3]*LDM(f[6])
                 + dtk[4]*LDM(f[7]) + dtk[5]*LDM(f[8]) + dtk[6]*LDM(f[9]) + dtk[7]*LDM(f[10])
                 + dtk[8]*LDM(f[11]) + dtk[9]*LDM(f[12]);
        fmt[3] *= coef;
        fmt[4] = LDM(f[4]) + dtk[1]*LDM(f[5]) + dtk[2]*LDM(f[6]) + dtk[3]*LDM(f[7])
                 + dtk[4]*LDM(f[8]) + dtk[5]*LDM(f[9]) + dtk[6]*LDM(f[10]) + dtk[7]*LDM(f[11])
                 + dtk[8]*LDM(f[12]) + dtk[9]*LDM(f[13]);
        fmt[4] *= coef;
        fmt[5] = LDM(f[5]) + dtk[1]*LDM(f[6]) + dtk[2]*LDM(f[7]) + dtk[3]*LDM(f[8])
                 + dtk[4]*LDM(f[9]) + dtk[5]*LDM(f[10]) + dtk[6]*LDM(f[11])
                 + dtk[7]*LDM(f[12]) + dtk[8]*LDM(f[13]) + dtk[9]*LDM(f[14]);
        fmt[5] *= coef;
        fmt[6] = LDM(f[6]) + dtk[1]*LDM(f[7]) + dtk[2]*LDM(f[8]) + dtk[3]*LDM(f[9])
                 + dtk[4]*LDM(f[10]) + dtk[5]*LDM(f[11]) + dtk[6]*LDM(f[12])
                 + dtk[7]*LDM(f[13]) + dtk[8]*LDM(f[14]) + dtk[9]*LDM(f[15]);
        fmt[6] *= coef;
        fmt[7] = LDM(f[7]) + dtk[1]*LDM(f[8]) + dtk[2]*LDM(f[9]) + dtk[3]*LDM(f[10])
                 + dtk[4]*LDM(f[11]) + dtk[5]*LDM(f[12]) + dtk[6]*LDM(f[13])
                 + dtk[7]*LDM(f[14]) + dtk[8]*LDM(f[15]) + dtk[9]*LDM(f[16]);
        fmt[7] *= coef;
        fmt[8] = LDM(f[8]) + dtk[1]*LDM(f[9]) + dtk[2]*LDM(f[10]) + dtk[3]*LDM(f[11])
                 + dtk[4]*LDM(f[12]) + dtk[5]*LDM(f[13]) + dtk[6]*LDM(f[14])
                 + dtk[7]*LDM(f[15]) + dtk[8]*LDM(f[16]) + dtk[9]*LDM(f[17]);
        fmt[8] *= coef;
    }
}

